name: Build

on:
  push:
    branches:
      - main
# Defaults for every job and step in this workflow
defaults:
  run:
    shell: bash # Run everything using bash

# Global environment variables
env:
  # Easy way to set the node version
  NODE_VERSION: '16'

# This workflow file contains four jobs, three to build the corresponding
# releases on all three supported platforms, and a last one, which will
# create the release draft.
jobs:
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  #                                                                           #
  #                              WINDOWS BUILDS                               #
  #                                                                           #
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  build_win:
    name: Windows build
    runs-on: windows-latest
    steps:
      # Check out main from desktop for a regular release
      - name: Clone client repository (main branch)
        uses: actions/checkout@v3
        with:
          ref: 'main'
          path: 'client'
      - name: Clone private desktop repository (main branch)
        uses: actions/checkout@v3
        with:
          ref: 'main'
          repository: azernis/desktop
          token: ${{ secrets.GH_PAT }}
      - name: Setup NodeJS ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Set up build environment
        run: npm install --ci
      # see https://www.zettlr.com/post/continuous-cross-platform-deployment-github-actions
      - name: Retrieve tag version
        id: ref
        run: |
          pkgver=$(node ./build/scripts/getPkgVersion.js)
          echo ::set-output name=version::$pkgver
      # Create the windows binaries.
      - name: Build NSIS installer (x64)
        run: npm run dist-win-x64
       # env:
       #   CSC_LINK: ${{ secrets.WIN_CERT_2025_03_15 }}
       #   CSC_KEY_PASSWORD: ${{ secrets.WIN_CERT_PASS_2025_03_15 }}
      # Now we need to cache all artifacts. We create one artifact per build
      # step. It should be noted that "artifacts" are more like file shares.
      # Thus they can contain multiple files.
      - name: Cache installers
        uses: actions/upload-artifact@v2
        with:
          name: win32
          path: |
            ./release/azernis-beta-${{steps.ref.outputs.version}}-x64.exe
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  #                                                                           #
  #                               MACOS BUILDS                                #
  #                                                                           #
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  build_macos:
    name: macOS build
    runs-on: macos-latest
    steps:
      # Check out main from desktop for a regular release
      - name: Clone client repository (main branch)
        uses: actions/checkout@v3
        with:
          ref: 'main'
          path: 'client'
      - name: Clone private desktop repository (main branch)
        uses: actions/checkout@v3
        with:
          ref: 'main'
          repository: azernis/desktop
          token: ${{ secrets.GH_PAT }}
      - name: Setup NodeJS ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Set up build environment
        run: npm install --ci
      - name: Retrieve tag version
        id: ref
        run: |
          pkgver=$(node ./build/scripts/getPkgVersion.js)
          echo ::set-output name=version::$pkgver
      # Now, finally build the app itself. 
      - name: Build macOS image file (arm64)
        run: npm run dist-mac-arm
        env:
          CSC_LINK: ${{ secrets.MACOS_CERT }}
          CSC_KEY_PASSWORD: ${{ secrets.MACOS_CERT_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
      - name: Build macOS image file (x64)
        run: npm run dist-mac-x64
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          CSC_LINK: ${{ secrets.MACOS_CERT }}
          CSC_KEY_PASSWORD: ${{ secrets.MACOS_CERT_PASSWORD }}
      # Finally upload both
      - name: Cache image files
        uses: actions/upload-artifact@v2
        with:
          name: darwin
          path: |
            ./release/azernis-beta-${{steps.ref.outputs.version}}-x64.dmg
            ./release/azernis-beta-${{steps.ref.outputs.version}}-arm64.dmg
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  #                                                                           #
  #                          PREPARE RELEASE DRAFT                            #
  #                                                                           #
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  # After the three builds, this job downloads all assets, creates and verifies
  # SHA256 checksums, and finally creates a release draft and uploads all
  # assets to it. NOTE: If the workflow detects a nightly is being built, this
  # step rather uploads the binaries to the Zettlr server instead of creating
  # a release draft.
  prepare_release:
    name: Prepare release draft
    # Make sure (and wait until) the builds have succeeded
    needs: [build_win, build_macos]
    runs-on: ubuntu-latest
    steps:
      - name: Clone client repository (main branch)
        uses: actions/checkout@v3
        with:
          ref: 'main'
          path: 'client'
      - name: Clone private desktop repository (main branch)
        uses: actions/checkout@v3
        with:
          ref: 'main'
          repository: azernis/desktop
          token: ${{ secrets.GH_PAT }}
      - name: Setup NodeJS ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Set up build environment
        run: npm install --ci
      - name: Retrieve tag version
        id: ref
        run: |
          pkgver=$(node ./build/scripts/getPkgVersion.js)
          echo ::set-output name=version::$pkgver
      - name: Make release directory
        run: mkdir ./release
      # First, download all resulting assets from the previous steps.
      - name: Retrieve windows installers
        uses: actions/download-artifact@v2
        with:
          name: win32
          path: ./release
      - name: Retrieve macOS images
        uses: actions/download-artifact@v2
        with:
          name: darwin
          path: ./release
      # Now we are set, we have all five release assets on the VM. It's time to
      # create the SHA-checksums file and then upload everything!
      - name: Generate SHA256 checksums
        run: |
          cd ./release
          sha256sum "azernis-beta-${{steps.ref.outputs.version}}-arm64.dmg" >> "SHA256SUMS.txt"
          sha256sum "azernis-beta-${{steps.ref.outputs.version}}-x64.dmg" >> "SHA256SUMS.txt"
          sha256sum "azernis-beta-${{steps.ref.outputs.version}}-x64.exe" > "SHA256SUMS.txt"
          cd ..
      - name: Verify checksums
        run: |
          cd ./release
          sha256sum -c SHA256SUMS.txt
          cd ..
      # Create a new release draft
      - name: Create release draft
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # Populate the inputs of the release we already know
          tag_name: v${{steps.ref.outputs.version}}
          name: Release v${{steps.ref.outputs.version}}
          body: If you can read this, we have forgotten to fill in the changelog. Sorry!
          draft: true # Always create as draft, so that we can populate the remaining values easily
          # Todo: add
          files: |
            ./release/azernis-beta-${{steps.ref.outputs.version}}-x64.dmg
            ./release/azernis-beta-${{steps.ref.outputs.version}}-arm64.dmg
            ./release/azernis-beta-${{steps.ref.outputs.version}}-x64.exe
            ./release/SHA256SUMS.txt